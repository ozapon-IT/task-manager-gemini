import { defineStore } from 'pinia'
import type { Task } from '~/types/api'

export const useTaskStore = defineStore('tasks', {
  state: () => ({
    tasks: [] as Task[],
    isLoading: false,
  }),

  getters: {
    getTasksByProjectId: (state) => (projectId: number) =>
      state.tasks.filter(task => task.projectId === projectId),
  },

  actions: {
    async fetchTasksByProjectId(projectId: number) {
      this.isLoading = true
      const { $api } = useNuxtApp()
      try {
        const res = await $api.get<Task[]>(`/projects/${projectId}/tasks`)
        if (Array.isArray(res.data)) {
          // API„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Çø„Çπ„ÇØ„Å´ projectId „Çí‰ªò‰∏é„Åô„Çã
          const tasksWithProjectId = res.data.map(task => ({ ...task, projectId }))

          // Êó¢Â≠ò„ÅÆ„Çø„Çπ„ÇØ„ÇíÁ∂≠ÊåÅ„Åó„Å§„Å§„ÄÅÊñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†ÔºàÈáçË§á„ÇíÈÅø„Åë„ÇãÔºâ
          const existingTaskIds = new Set(this.tasks.map(t => t.id))
          const newTasks = tasksWithProjectId.filter(t => !existingTaskIds.has(t.id))
          this.tasks.push(...newTasks)
        }
      } catch (error) {
        console.error(`Failed to fetch tasks for project ${projectId}:`, error)
      } finally {
        this.isLoading = false
      }
    },

    // ‚ûï „Çø„Çπ„ÇØ‰ΩúÊàê
    async createTask(projectId: number, task: Omit<Task, 'id' | 'projectId'>) {
      const { $api } = useNuxtApp()
      try {
        const res = await $api.post<Task>(`/projects/${projectId}/tasks`, task)
        this.tasks.push({ ...res.data, projectId })
      } catch (error) {
        console.error('Failed to create task:', error)
      }
    },

    async updateTask(updatedTask: Task) {
      const { $api } = useNuxtApp()
      try {
        const res = await $api.put<Task>(
          `/projects/${updatedTask.projectId}/tasks/${updatedTask.id}`,
          updatedTask
        )
        const index = this.tasks.findIndex(task => task.id === res.data.id)
        if (index !== -1) {
          // ÂÖÉ„ÅÆ projectId „ÇíÁ∂≠ÊåÅ„Åó„Å§„Å§„ÄÅ„É¨„Çπ„Éù„É≥„Çπ„Éá„Éº„Çø„ÅßÊõ¥Êñ∞„Åô„Çã
          this.tasks[index] = { ...res.data, projectId: this.tasks[index].projectId }
        }
      } catch (error) {
        console.error('Failed to update task:', error)
      }
    },

    // ‚ùå „Çø„Çπ„ÇØÂâäÈô§
    async deleteTask(task: Task) {
      const { $api } = useNuxtApp()
      try {
        await $api.delete(`/projects/${task.projectId}/tasks/${task.id}`)
        this.tasks = this.tasks.filter(t => t.id !== task.id)
      } catch (error) {
        console.error('Failed to delete task:', error)
      }
    },

    // üîÅ „Çπ„ÉÜ„Éº„Çø„ÇπÂàáÊõø
    async toggleTaskStatus(task: Task) {
      // „Çπ„ÉÜ„Éº„Çø„Çπ„ÅØÂ§ßÊñáÂ≠ó„ÉªÂ∞èÊñáÂ≠ó„ÇíÂå∫Âà•„Åõ„Åö„Å´ÊØîËºÉ„Åó„ÄÅÂ§ßÊñáÂ≠ó„ÅÆEnumÂÄ§„Å´Ë®≠ÂÆö„Åô„Çã
      const newStatus = task.status.toUpperCase() === 'DONE' ? 'TODO' : 'DONE'
      const updatedTask = { ...task, status: newStatus }
      await this.updateTask(updatedTask)
    },

    // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàID„ÇíÊåáÂÆö„Åó„Å¶„Çø„Çπ„ÇØ„Çí„Çπ„Éà„Ç¢„Åã„ÇâÂâäÈô§
    removeTasksByProjectId(projectId: number) {
      this.tasks = this.tasks.filter(task => task.projectId !== projectId)
    },
  },
})
